<?php
/**
 * Zend library includes.
 */
require_once 'Zend/Db.php';
require_once 'Zend/Log.php';
require_once 'Zend/Log/Writer/Stream.php';
require_once 'Zend/Registry.php';

/**
 * Houston library includes.
 */
require_once 'Houston/DataObject.php';

/** 
 * Implementation of hook_init().
 */ 
function houston_init() {
  // Load the application object into the Zend Registry.
  // TODO: The application depends upon this being in the registry.
  // Either take out that dependence, or do this from within the application.
  Zend_Registry::set('Houston_Application', houston_get_data_object('Houston_Application'));
}

/**
 * Parse the Drupal $db_url into an array and return it.
 *
 * @return
 *   An array of database connection options compaible with 
 */
function houston_parse_drupal_db_dsn() {

  global $db_url;
  static $url = array();

  if (empty($url)) {
    $url = parse_url($db_url);
    $url['username'] = urldecode($url['user']);
    $url['password'] = isset($url['pass']) ? urldecode($url['pass']) : '';
    $url['host'] = urldecode($url['host']);
    $url['dbname'] = urldecode(substr($url['path'], 1));
    if (isset($url['port'])) {
      $url['host'] = $url['host'] .':'. $url['port'];
    }
    $url['charset'] = 'utf8';
  }
  return $url;
}

/**
 * Return an object of type $class_name.
 * 
 * @param mixed $class_name 
 */
function houston_get_data_object($class_name) {

  static $db, $config;

  if ($db === NULL) {
    $db = Zend_db::factory('Mysqli', houston_parse_drupal_db_dsn());
    $db->setFetchMode(Zend_Db::FETCH_OBJ);
    Zend_Registry::set(variable_get('db_registry_key', 'drupal_db'), $db);
    $config = array(
      'db_registry_key' => variable_get('db_registry_key', 'drupal_db'),
    );
  }
  return Houston_DataObject::factory($class_name, $config);
}

